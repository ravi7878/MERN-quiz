[{"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\index.tsx":"1","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\reportWebVitals.ts":"2","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\App.tsx":"3","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\MainPage.tsx":"4","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Store.ts":"5","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\RootReducer.ts":"6","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Action\\QuizActionType.ts":"7","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\UserReducer.ts":"8","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\SplashScreen.tsx":"9","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Action\\QuizAction.ts":"10","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\QuizEnter.tsx":"11","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\QuizReducer.ts":"12","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\QuizPage.tsx":"13"},{"size":573,"mtime":1610080231427,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":713,"mtime":1610516572093,"results":"17","hashOfConfig":"15"},{"size":3683,"mtime":1610517297290,"results":"18","hashOfConfig":"15"},{"size":363,"mtime":1610093620063,"results":"19","hashOfConfig":"15"},{"size":232,"mtime":1610449343898,"results":"20","hashOfConfig":"15"},{"size":1362,"mtime":1610945212925,"results":"21","hashOfConfig":"15"},{"size":1060,"mtime":1610708292271,"results":"22","hashOfConfig":"15"},{"size":1019,"mtime":1610099085652,"results":"23","hashOfConfig":"15"},{"size":2699,"mtime":1610945242351,"results":"24","hashOfConfig":"15"},{"size":17505,"mtime":1611137315459,"results":"25","hashOfConfig":"15"},{"size":748,"mtime":1610945278432,"results":"26","hashOfConfig":"15"},{"size":2967,"mtime":1610519677228,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ftoe0i",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\index.tsx",[],["59","60"],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\reportWebVitals.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\App.tsx",["61"],"import React from 'react';\nimport {BrowserRouter as Router , Switch , Route } from \"react-router-dom\"\nimport MainPage from './Component/MainPage'\nimport QuizEnter from './Component/QuizEnter'\nimport SpashScreen from \"./Component/SplashScreen\"\nimport {useSelector} from \"react-redux\"\nimport {RootStore} from \"./Redux/Store\"\nconst App:React.FC = () =>  {\n  const userState = useSelector((state:RootStore) => state)\n  return (\n    <Router>\n  <div className=\"App\">\n    <Switch>\n      <Route  exact path=\"/\"> <SpashScreen/></Route >\n      <Route  exact path=\"/home\"><MainPage /></Route>\n      <Route exact path=\"/quiz\"><QuizEnter/></Route>\n    </Switch>\n     \n    </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\MainPage.tsx",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Store.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\RootReducer.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Action\\QuizActionType.ts",[],["62","63"],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\UserReducer.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\SplashScreen.tsx",["64","65"],"import React, { Component, Fragment } from 'react'\r\nimport { RouteComponentProps,withRouter  } from \"react-router-dom\";\r\nimport \"../Style/MainPage.css\"\r\ninterface State {\r\n    showLoader: boolean;\r\n}\r\ninterface Props extends RouteComponentProps<any>{}\r\n class SpashScreen extends Component<Props, State>{\r\n    constructor(props: Props)\r\n    {\r\n        super(props);\r\n       this.state = {\r\n            showLoader : true\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <Fragment>\r\n                 <div className=\"splash-screen\" style={{\r\n                    backgroundImage:\"url(\" + \"https://miro.medium.com/max/1600/1*e_Loq49BI4WmN7o9ItTADg.gif\" + \")\",\r\n                    backgroundColor:\"black\"\r\n                 }} >\r\n                     <button className=\"btn-start\" onClick={()=> this.props.history.push(\"/home\")}>Start<span>\r\n                         </span></button>\r\n                </div>  \r\n           </Fragment>\r\n            \r\n    )\r\n}\r\n} \r\n\r\nexport default withRouter (SpashScreen)","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Action\\QuizAction.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\QuizEnter.tsx",["66","67","68","69","70"],"import React, { Component, Fragment } from 'react'\r\nimport {connect } from \"react-redux\"\r\nimport \"../Style/QuizPage.css\"\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\nimport {getQuizQuestions,submitQuizResult} from \"../Redux/Action/QuizAction\"\r\nimport {bindActionCreators, Dispatch} from \"redux\"\r\n  \r\ninterface State {\r\n    showLoader: boolean,\r\n    index:number,\r\n    count:any,\r\n    difficulty:string,\r\n    type:string,\r\n    user:any,\r\n    quiz:any,\r\n    questions:any,\r\n    answer:any,\r\n    selectedAnswer:String,\r\n    answerSelected:boolean,\r\n    complete:boolean\r\n}\r\ninterface Props {\r\n    quiz:any,\r\n    user:any,\r\n    getQuizQuestions:any,\r\n    submitQuizResult:any\r\n}\r\n\r\n class QuizEnter extends Component<Props, State>{\r\n    constructor(props: Props)\r\n    {\r\n        super(props);\r\n       this.state = {\r\n            showLoader : false,\r\n            count:null,\r\n            index:0,\r\n            difficulty:\"easy\",\r\n            type:\"multiple\",\r\n            user:[],\r\n            quiz:[],\r\n            answer:[],\r\n            questions:[],\r\n            selectedAnswer:\"\",\r\n            answerSelected:false,\r\n            complete:false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleNext = this.handleNext.bind(this)\r\n        this.handleAnswer = this.handleAnswer.bind(this)\r\n        this.handleSkip = this.handleSkip.bind(this)\r\n        this.handleFinish = this.handleFinish.bind(this)\r\n\r\n        this.handleChangeDifficulty = this.handleChangeDifficulty.bind(this)\r\n    }\r\n  \r\n    componentDidMount()\r\n    {\r\n        const {user} = this.props\r\n    }\r\n    componentWillReceiveProps(prevProps:any,nextProps:any)\r\n    {\r\n\r\n        if(prevProps)\r\n        {\r\n            if(!prevProps.user.loading)\r\n            {\r\n                this.setState({\r\n                    user : prevProps.user.user,\r\n                    questions: prevProps.quiz.questions\r\n                })\r\n            }\r\n            \r\n        }\r\n    }\r\n   \r\n    handleChange (e:React.ChangeEvent<HTMLInputElement>) {\r\n      this.setState({\r\n            count:e.target.value\r\n        })\r\n      \r\n    }\r\n    handleChangeDifficulty(e:React.ChangeEvent<HTMLSelectElement>)\r\n    {\r\n        switch(e.target.name)\r\n        {\r\n             case \"difficulty\":\r\n                 this.setState({\r\n                     difficulty:e.target.value\r\n                 })\r\n                 break;\r\n             case \"type\":\r\n                 this.setState({\r\n                     type:e.target.value\r\n                 })\r\n                 break;\r\n        }\r\n    }\r\n    \r\n    handleSubmit = () => {\r\n        this.setState({\r\n            index:0,\r\n            showLoader:true\r\n        })\r\n        const {count , difficulty , type} = this.state\r\n        this.props.getQuizQuestions(count,difficulty,type)\r\n    }\r\n   \r\n    handleNext = () =>\r\n    {\r\n            if(this.state.questions.length+1 !== this.state.index)\r\n            {\r\n                this.setState({\r\n                    answer:[...this.state.answer,\r\n                        {\r\n                        index:this.state.index,\r\n                        answer:this.state.selectedAnswer,\r\n                        result:this.state.questions[this.state.index].correct_answer === this.state.selectedAnswer ? \"correct\" : \"incorrect\",\r\n                        skiped:false\r\n                    }]\r\n                },\r\n                ()=>{\r\n                   \r\n                    if(this.state.questions.length !== this.state.answer.length)\r\n                    {\r\n                        this.setState({\r\n                            index:this.state.index +1,\r\n                            answerSelected:false,\r\n                            selectedAnswer:\"\"\r\n                        },()=>{\r\n                            // console.log(this.state.answer)\r\n                        })\r\n                    }\r\n                    else\r\n                    {\r\n                        this.setState({\r\n                            complete:true\r\n                        })\r\n                    }\r\n                   \r\n                })\r\n                \r\n            }\r\n    }\r\n    handleSkip = () => {\r\n      \r\n        if(this.state.questions.length !== this.state.index)\r\n        {\r\n            \r\n            this.setState({\r\n                answer:[...this.state.answer,\r\n                    {\r\n                    index:this.state.index,\r\n                    answer:this.state.questions[this.state.index].correct_answer,\r\n                    result:\"\",\r\n                    skiped:true\r\n                }]\r\n            },\r\n            ()=>{\r\n                if(this.state.questions.length !== this.state.answer.length)\r\n                {\r\n                    this.setState({\r\n                        index:this.state.index +1,\r\n                        answerSelected:false,\r\n                        selectedAnswer:\"\"\r\n                    },()=>{\r\n                        console.log(this.state.answer)\r\n                    })\r\n                }\r\n               \r\n            })\r\n            \r\n        }\r\n    }\r\n    handleFinish()\r\n    {\r\n        const result =  Math.floor((this.state.answer.filter((item:any)=>{return item.result === \"correct\"}).length / this.state.answer.length) * 100 )\r\n        this.props.submitQuizResult(this.props.user.user.id,this.state.answer , result , this.state.count,this.state.type,this.state.difficulty)              \r\n        this.setState({\r\n            showLoader:false,\r\n            questions:[],\r\n            complete:false\r\n        })\r\n    }\r\n    handleAnswer(e:any)\r\n    {\r\n        this.setState({\r\n            selectedAnswer:e.target.value,\r\n            answerSelected:true\r\n        })\r\n    }\r\n    render()\r\n    {\r\n        const {user, quiz} = this.props.user\r\n        const {questions,index,answer} = this.state\r\n        let mcq:any = [] \r\n        if(questions.length > 0 && questions.length !== answer.length)\r\n        {\r\n            mcq.push(questions[this.state.index].correct_answer,...questions[this.state.index].incorrect_answers)\r\n        }\r\n        \r\n        return (\r\n           <div className=\"quiz-page\">\r\n               <div className=\"quiz-container\">\r\n               <div className=\"top-detail-bar\">\r\n                   <div>Name :- {user && user.name}</div>\r\n                   <div>Email :- {user && user.email} </div>\r\n                   <div>Total Quiz :- {quiz && quiz.length}</div>\r\n               </div>\r\n               <div className=\"top-search-bar\">\r\n                    <input className=\"quiz-input\" name=\"count\" value={this.state.count} onChange={this.handleChange} placeholder=\"Enter Question Count\" type=\"number\"/>\r\n                   \r\n                    <select  name=\"difficulty\" value={this.state.difficulty} onChange={ this.handleChangeDifficulty }  placeholder=\"Select Difficulty:\">\r\n                        <option value=\"disbled\" disabled>Select Difficulty</option>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Mediam</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n                    <select  name=\"type\" placeholder=\"Select Type:\" value={this.state.type} onChange={this.handleChangeDifficulty } >\r\n\r\n                        <option value=\"disbled\" disabled>Select Type</option>\r\n                        <option  value=\"multiple\">Multiple Choice</option>\r\n                        <option value=\"boolean\">True/False</option>\r\n                    </select>\r\n                    <button className=\"btn-enter\" onClick={this.handleSubmit}>Enter Quiz<span></span></button>\r\n               </div>\r\n               <div className=\"quiz-section\">\r\n                  {questions.length > 0 && this.state.answer && this.state.showLoader ? <div className=\"quiz-section-main\">  \r\n                    <div className=\"quiz-section-left\">\r\n                       <div className=\"quiz-left-upper\">\r\n                            <div className=\"quiz-counter\">\r\n                                {!this.state.complete ?   questions.map((data:any,index:any)=> {\r\n                                return(\r\n                                    <div \r\n                                        key={index} \r\n                                        style={{\r\n                                            backgroundColor: answer.some( (answer:any) => answer['index'] === index && answer['skiped'] === false  ) ? \"red\" : \r\n                                            // answer.some( (answer:any) => answer['skiped']) ? \"pink\" : \r\n                                            this.state.index === index ? \"green\" : \"orange\",\r\n                                            cursor:\"pointer\"\r\n                                        }}\r\n                                        className=\"count\"\r\n                                        onClick={()=>{this.setState({index:index})}}\r\n                                        >\r\n                                    {index +1}\r\n                                    </div>\r\n                                )\r\n                            }) : \r\n                            answer.map((data:any,index:any)=> {\r\n                                return(\r\n                                    <div \r\n                                        key={index} \r\n                                        style={{\r\n                                            backgroundColor: data.result === \"correct\" ? \"green\" : data.skiped? \"#000080\": \"red\" \r\n                                        }}\r\n                                        className=\"count\">\r\n                                    {index +1}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            }\r\n                           \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"quiz-left-lower\">\r\n                            <div className=\"detail-div\" >\r\n                                <p>Total Questions :- {this.state.count}</p>\r\n                            </div>\r\n                            <div className=\"detail-div\">\r\n                                <p>Difficulty :- {this.state.difficulty}</p>\r\n                            </div>     \r\n                            <div className=\"detail-div\">\r\n                               <p>type :- {this.state.type}</p>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                   \r\n                    <div className=\"quiz-section-right\">                 \r\n                         {questions && !this.state.complete ? \r\n                        <div className=\"quiz-right-inner\">\r\n                            <div className=\"quiz-question\">\r\n                                <p>\r\n                                    {questions[this.state.index].question}\r\n                                </p>\r\n                            </div>\r\n                         <div className=\"quiz-option\">\r\n                           <div>\r\n                           {                      \r\n                           mcq.map((data:any,index:number)=>{\r\n                              \r\n                               return <div className=\"quiz-option-div active\">\r\n                                    <input className=\"radio\" type=\"radio\"  value={data} name=\"gender\" onChange={this.handleAnswer} /> {data}\r\n                               </div>\r\n                           })\r\n                           }\r\n                           </div>       \r\n                       </div>               \r\n                            <div className=\"quiz-action\">\r\n                                <div>\r\n                                    <button className=\"btn-next\" disabled={!this.state.answerSelected} onClick={this.handleNext}>Next<span></span></button>\r\n                                    <button className=\"btn-skip\" onClick={this.handleSkip}>Skip<span></span></button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                         : \r\n                         <div className=\"quiz-right-inner\">\r\n                           <div className=\"quiz-complete-result\">\r\n                                <div className=\"quiz-result-header\">\r\n                                   result\r\n                                </div>\r\n                                <div className=\"quiz-result-table\">\r\n                                    <table>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Qesution No </th>\r\n                                                <th>Answer(Correct Answer)  </th>\r\n                                                <th>Result  </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.state.answer.map((data:any,index:number) => {\r\n                                                return(\r\n                                                    <tr style={{backgroundColor:data.result === \"incorrect\" ?  \"#a50e0ea4\" : data.skiped ? \"#000080\" : \"#0b992aa4\" }}>\r\n                                                    <td>{index+1}</td>\r\n                                                    <td>{data.skiped ? \"skiped\":data.result === \"correct\" ? data.answer : data.answer + \"(\" +this.state.questions[index].correct_answer + \")\" }  </td>\r\n                                                    <td >{data.skiped ? \"skiped\":data.result}</td>\r\n                                                    </tr>\r\n                                                )                                               \r\n                                            })}\r\n                                            <tr className=\"footer-table\">\r\n                                                <td colSpan={3}>\r\n                                                 { this.state.answer.filter((item:any)=>{return item.result === \"correct\"}).length}{\" \"}\r\n                                                     correct answers out of {this.state.answer.length  } you got { Math.floor((this.state.answer.filter((item:any)=>{return item.result === \"correct\"}).length / this.state.answer.length) * 100 )} % \r\n\r\n                                                </td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                    \r\n                                </div>\r\n                                <div className=\"submit-btn-div\">\r\n                                    <button className=\"btn-finish\" onClick={this.handleFinish}>Submit<span></span></button>\r\n                                </div>  \r\n                             </div>\r\n                                                     \r\n                        </div>\r\n                        }\r\n                    </div> \r\n                  </div> : \r\n                   <div className=\"quiz-result\">\r\n                        \r\n                       <table>\r\n                           <thead>\r\n                               <tr>\r\n                                   <td colSpan={6}>PREVIOUS QUIZ RESULT </td>\r\n                               </tr>\r\n                               <tr>\r\n                                   <th>Id</th>\r\n                                   <th>Catagory</th>\r\n                                   <th>Difficulty</th>\r\n                                   <th>Total Quesions/Correct Answer</th>\r\n                                   <th>Type</th>\r\n                                   <th>Result</th>\r\n                               </tr>\r\n                             \r\n                           </thead>\r\n                           <tbody>\r\n                               {quiz && quiz.map((data:any,index:number) => {\r\n                                   \r\n                                   return (\r\n                                   <tr style={{backgroundColor:data.quizResult ?\"#0b992aa4\": \"#a50e0ea4\"}}>\r\n                                   <td>{index+1}</td>\r\n                                   <td>{data.quizDetail.SelectCategory}</td>\r\n                                   <td>{data.quizDetail.SelectDifficulty}</td>\r\n                                   <td>{data.quizDetail.NumberofQuestions + \"/\" + data.quizDetail.CorrectAnswer}</td>\r\n                                   <td>{data.quizDetail.SelectType}</td>\r\n                                   <td>{data.quizResult ? \"Pass\" : \"Fail\"}</td>\r\n                                    </tr>\r\n                                )})}\r\n                           </tbody>\r\n                       </table>\r\n                   </div>\r\n                  }\r\n               </div>\r\n               </div>\r\n             \r\n            </div>  \r\n      \r\n    )\r\n}\r\n} \r\nconst mapStateToProps = (state:any) => ({\r\n    user : state.user,\r\n    quiz :state.quiz\r\n})\r\nconst mapDispatchToProps = (dispatch:Dispatch) =>\r\n{\r\n    return bindActionCreators(\r\n        {\r\n            getQuizQuestions,\r\n            submitQuizResult\r\n        },\r\n        dispatch\r\n    )\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(QuizEnter)\r\n","E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Redux\\Reducers\\QuizReducer.ts",[],"E:\\web tutotials\\react\\Office Work\\MERN\\Quiz app\\Quiz\\src\\Component\\QuizPage.tsx",["71","72","73","74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":9,"column":9,"nodeType":"82","messageId":"83","endLine":9,"endColumn":18},{"ruleId":"76","replacedBy":"84"},{"ruleId":"78","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":21,"column":44,"nodeType":"88","messageId":"89","endLine":21,"endColumn":45},{"ruleId":"86","severity":1,"message":"87","line":21,"column":110,"nodeType":"88","messageId":"89","endLine":21,"endColumn":111},{"ruleId":"80","severity":1,"message":"90","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":36},{"ruleId":"80","severity":1,"message":"91","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":14},{"ruleId":"80","severity":1,"message":"92","line":5,"column":8,"nodeType":"82","messageId":"83","endLine":5,"endColumn":23},{"ruleId":"80","severity":1,"message":"93","line":60,"column":16,"nodeType":"82","messageId":"83","endLine":60,"endColumn":20},{"ruleId":"80","severity":1,"message":"94","line":196,"column":26,"nodeType":"82","messageId":"83","endLine":196,"endColumn":31},{"ruleId":"80","severity":1,"message":"95","line":2,"column":9,"nodeType":"82","messageId":"83","endLine":2,"endColumn":16},{"ruleId":"80","severity":1,"message":"96","line":4,"column":9,"nodeType":"82","messageId":"83","endLine":4,"endColumn":25},{"ruleId":"80","severity":1,"message":"97","line":5,"column":9,"nodeType":"82","messageId":"83","endLine":5,"endColumn":27},{"ruleId":"80","severity":1,"message":"98","line":5,"column":29,"nodeType":"82","messageId":"83","endLine":5,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":65,"column":52,"nodeType":"101","messageId":"102","endLine":65,"endColumn":54},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'userState' is assigned a value but never used.","Identifier","unusedVar",["103"],["104"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Fragment' is defined but never used.","'Fade' is defined but never used.","'TransitionGroup' is defined but never used.","'user' is assigned a value but never used.","'index' is assigned a value but never used.","'connect' is defined but never used.","'getQuizQuestions' is defined but never used.","'bindActionCreators' is defined but never used.","'Dispatch' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]